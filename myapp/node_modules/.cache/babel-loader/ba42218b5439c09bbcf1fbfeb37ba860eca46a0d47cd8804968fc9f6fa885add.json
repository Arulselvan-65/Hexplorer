{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blockchain_Prac\\\\block\\\\client\\\\myapp\\\\src\\\\Etherscan.js\",\n  _s = $RefreshSig$();\nconst {\n  Alchemy,\n  Network\n} = require(\"alchemy-sdk\");\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst setting = {\n  apiKey: \"1dFCMwz6qW-UR-dDdjd5km0vL3aKzjUN\",\n  Network: Network.ETH_MAINNET\n};\nconst provider = new Alchemy(setting);\nconst ethers = require('ethers');\nexport const Etherescan = /*#__PURE__*/React.createContext();\nexport const EtherProvider = ({\n  children\n}) => {\n  _s();\n  const tenBlockWithDetails = [];\n  const [yourBlockTrans, setYourBlockTrans] = useState(tenBlockWithDetails);\n  const [currentBlock, setCurrentBlock] = useState([]);\n  const [topTenBlock, setTopTenBlock] = useState([]);\n  const [transaction, setTransaction] = useState([]);\n  const [gasPrice, setGasPrice] = useState(\"\");\n  const etherData = \"Hey checking connection\";\n  const accountDetails = async () => {\n    try {\n      const getCurrentBlock = await provider.getBlockNumber();\n      setCurrentBlock(getCurrentBlock);\n\n      //SINGLE BLOCAK TRANSACTION\n      const blockTransaction = await provider.getBlock(getCurrentBlock);\n      setTransaction(blockTransaction.transactions);\n\n      //TOP TEN BLOCK//\n      const previousBlock = getCurrentBlock - 10;\n      const listTenBlock = [];\n      for (let i = getCurrentBlock; i > previousBlock; i--) {\n        listTenBlock.push([i]);\n      }\n\n      //GET BLOCK DETAILS\n      const getBlockDetails = listTenBlock.flat();\n      setTopTenBlock(getBlockDetails);\n      getBlockDetails.map(async el => {\n        const singleBlockData = await provider.getBlock(el);\n        tenBlockWithDetails.push(singleBlockData);\n      });\n\n      //ETHER PRICE//\n      const gasPrice = await provider.getGasPrice();\n      const latestGasPrice = ethers.utils.formatUnits(gasPrice);\n      setGasPrice(latestGasPrice);\n    } catch (error) {\n      console.log(\"Something wrong\");\n    }\n  };\n  useEffect(() => {\n    accountDetails();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Etherescan.Provider, {\n    value: {\n      etherData,\n      currentBlock,\n      topTenBlock,\n      yourBlockTrans,\n      transaction,\n      gasPrice,\n      provider\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(EtherProvider, \"ngw7raQZEpGy8qyfTMFwtHUxvLQ=\");\n_c = EtherProvider;\nvar _c;\n$RefreshReg$(_c, \"EtherProvider\");","map":{"version":3,"names":["Alchemy","Network","require","React","useState","useEffect","jsxDEV","_jsxDEV","setting","apiKey","ETH_MAINNET","provider","ethers","Etherescan","createContext","EtherProvider","children","_s","tenBlockWithDetails","yourBlockTrans","setYourBlockTrans","currentBlock","setCurrentBlock","topTenBlock","setTopTenBlock","transaction","setTransaction","gasPrice","setGasPrice","etherData","accountDetails","getCurrentBlock","getBlockNumber","blockTransaction","getBlock","transactions","previousBlock","listTenBlock","i","push","getBlockDetails","flat","map","el","singleBlockData","getGasPrice","latestGasPrice","utils","formatUnits","error","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Blockchain_Prac/block/client/myapp/src/Etherscan.js"],"sourcesContent":["const {Alchemy,Network} = require(\"alchemy-sdk\");\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst setting = {\r\n  apiKey: \"1dFCMwz6qW-UR-dDdjd5km0vL3aKzjUN\",\r\n  Network: Network.ETH_MAINNET\r\n}\r\n\r\nconst provider = new Alchemy(setting);\r\nconst ethers = require('ethers')\r\nexport const Etherescan = React.createContext();\r\n\r\nexport const EtherProvider = ({ children }) => {\r\n  const tenBlockWithDetails = [];\r\n  const [yourBlockTrans, setYourBlockTrans] = useState(tenBlockWithDetails);\r\n  const [currentBlock, setCurrentBlock] = useState([]);\r\n  const [topTenBlock, setTopTenBlock] = useState([]);\r\n  const [transaction, setTransaction] = useState([]);\r\n  const [gasPrice, setGasPrice] = useState(\"\");\r\n\r\n  const etherData = \"Hey checking connection\";\r\n\r\n  const accountDetails = async () => {\r\n    try {\r\n      const getCurrentBlock = await provider.getBlockNumber();\r\n      setCurrentBlock(getCurrentBlock);\r\n\r\n      //SINGLE BLOCAK TRANSACTION\r\n      const blockTransaction = await provider.getBlock(getCurrentBlock);\r\n      setTransaction(blockTransaction.transactions);\r\n\r\n      //TOP TEN BLOCK//\r\n      const previousBlock = getCurrentBlock - 10;\r\n      const listTenBlock = [];\r\n\r\n      for (let i = getCurrentBlock; i > previousBlock; i--) {\r\n        listTenBlock.push([i]);\r\n      }\r\n\r\n      //GET BLOCK DETAILS\r\n      const getBlockDetails = listTenBlock.flat();\r\n      setTopTenBlock(getBlockDetails);\r\n\r\n      getBlockDetails.map(async (el) => {\r\n        const singleBlockData = await provider.getBlock(el);\r\n        tenBlockWithDetails.push(singleBlockData);\r\n      });\r\n\r\n      //ETHER PRICE//\r\n      const gasPrice = await provider.getGasPrice();\r\n      const latestGasPrice = ethers.utils.formatUnits(gasPrice);\r\n      setGasPrice(latestGasPrice);\r\n    } catch (error) {\r\n      console.log(\"Something wrong\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    accountDetails();\r\n  }, []);\r\n\r\n  return (\r\n    <Etherescan.Provider\r\n      value={{\r\n        etherData,\r\n        currentBlock,\r\n        topTenBlock,\r\n        yourBlockTrans,\r\n        transaction,\r\n        gasPrice,\r\n        provider,\r\n      }}\r\n    >\r\n      {children}\r\n    </Etherescan.Provider>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}