{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Alchemy,\n  Network\n} = require(\"alchemy-sdk\");\nconst ethers = require('ethers');\nconst setting = {\n  apiKey: \"1dFCMwz6qW-UR-dDdjd5km0vL3aKzjUN\",\n  Network: Network.ETH_MAINNET\n};\nconst provider = new Alchemy(setting);\nexport const EtherProvider = () => {\n  _s();\n  const tenBlockWithDetails = [];\n  const [currentBlock, setCurrentBlock] = useState([]);\n  const [topTenBlock, setTopTenBlock] = useState([]);\n  const [transaction, setTransaction] = useState([]);\n  const [gasPrice, setGasPrice] = useState(\"\");\n  const etherData = \"Hey checking connection\";\n  const accountDetails = async () => {\n    try {\n      const getCurrentBlock = await provider.getBlockNumber();\n      setCurrentBlock(getCurrentBlock);\n\n      // SINGLE BLOCK TRANSACTION\n      const blockTransaction = await provider.getBlock(getCurrentBlock);\n      setTransaction(blockTransaction.transactions);\n\n      // TOP TEN BLOCK\n      const previousBlock = getCurrentBlock - 10;\n      const listTenBlock = [];\n      for (let i = getCurrentBlock; i > previousBlock; i--) {\n        listTenBlock.push([i]);\n      }\n\n      // GET BLOCK DETAILS\n      const getBlockDetails = listTenBlock.flat();\n      setTopTenBlock(getBlockDetails);\n      const blockDetailsPromises = getBlockDetails.map(async el => {\n        const singleBlockData = await provider.getBlock(el);\n        return singleBlockData;\n      });\n      const blockDetails = await Promise.all(blockDetailsPromises);\n      tenBlockWithDetails.push(...blockDetails);\n\n      // ETHER PRICE\n      const gasPrice = await provider.getGasPrice();\n      const latestGasPrice = ethers.utils.formatUnits(gasPrice);\n      setGasPrice(latestGasPrice);\n    } catch (error) {\n      console.log(\"Something wrong\");\n    }\n  };\n  useEffect(() => {\n    accountDetails();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // Pass state as props to children components\n    _jsxDEV(_Fragment, {\n      children: children({\n        transaction,\n        currentBlock,\n        topTenBlock,\n        gasPrice\n      })\n    }, void 0, false)\n  );\n};\n_s(EtherProvider, \"qqyE3LHW2NWtJ1swYZ3/tElub/A=\");\n_c = EtherProvider;\nvar _c;\n$RefreshReg$(_c, \"EtherProvider\");","map":{"version":3,"names":["React","useState","useEffect","Fragment","_Fragment","jsxDEV","_jsxDEV","Alchemy","Network","require","ethers","setting","apiKey","ETH_MAINNET","provider","EtherProvider","_s","tenBlockWithDetails","currentBlock","setCurrentBlock","topTenBlock","setTopTenBlock","transaction","setTransaction","gasPrice","setGasPrice","etherData","accountDetails","getCurrentBlock","getBlockNumber","blockTransaction","getBlock","transactions","previousBlock","listTenBlock","i","push","getBlockDetails","flat","blockDetailsPromises","map","el","singleBlockData","blockDetails","Promise","all","getGasPrice","latestGasPrice","utils","formatUnits","error","console","log","children","_c","$RefreshReg$"],"sources":["D:/Blockchain_Prac/block/client/myapp/src/Etherscan.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nconst { Alchemy, Network } = require(\"alchemy-sdk\");\r\nconst ethers = require('ethers');\r\n\r\nconst setting = {\r\n  apiKey: \"1dFCMwz6qW-UR-dDdjd5km0vL3aKzjUN\",\r\n  Network: Network.ETH_MAINNET,\r\n};\r\n\r\nconst provider = new Alchemy(setting);\r\n\r\nexport const EtherProvider = () => {\r\n  const tenBlockWithDetails = [];\r\n  const [currentBlock, setCurrentBlock] = useState([]);\r\n  const [topTenBlock, setTopTenBlock] = useState([]);\r\n  const [transaction, setTransaction] = useState([]);\r\n  const [gasPrice, setGasPrice] = useState(\"\");\r\n\r\n  const etherData = \"Hey checking connection\";\r\n\r\n  const accountDetails = async () => {\r\n    try {\r\n      const getCurrentBlock = await provider.getBlockNumber();\r\n      setCurrentBlock(getCurrentBlock);\r\n\r\n      // SINGLE BLOCK TRANSACTION\r\n      const blockTransaction = await provider.getBlock(getCurrentBlock);\r\n      setTransaction(blockTransaction.transactions);\r\n\r\n      // TOP TEN BLOCK\r\n      const previousBlock = getCurrentBlock - 10;\r\n      const listTenBlock = [];\r\n\r\n      for (let i = getCurrentBlock; i > previousBlock; i--) {\r\n        listTenBlock.push([i]);\r\n      }\r\n\r\n      // GET BLOCK DETAILS\r\n      const getBlockDetails = listTenBlock.flat();\r\n      setTopTenBlock(getBlockDetails);\r\n\r\n      const blockDetailsPromises = getBlockDetails.map(async (el) => {\r\n        const singleBlockData = await provider.getBlock(el);\r\n        return singleBlockData;\r\n      });\r\n\r\n      const blockDetails = await Promise.all(blockDetailsPromises);\r\n      tenBlockWithDetails.push(...blockDetails);\r\n\r\n      // ETHER PRICE\r\n      const gasPrice = await provider.getGasPrice();\r\n      const latestGasPrice = ethers.utils.formatUnits(gasPrice);\r\n      setGasPrice(latestGasPrice);\r\n    } catch (error) {\r\n      console.log(\"Something wrong\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    accountDetails();\r\n  }, []);\r\n\r\n  return (\r\n    // Pass state as props to children components\r\n    <>\r\n      {children({\r\n        transaction,\r\n        currentBlock,\r\n        topTenBlock,\r\n        gasPrice,\r\n      })}\r\n    </>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}