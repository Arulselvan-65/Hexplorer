{"ast":null,"code":"const {\n  Alchemy,\n  Network\n} = require(\"alchemy-sdk\");\nconst setting = {\n  apiKey: \"1dFCMwz6qW-UR-dDdjd5km0vL3aKzjUN\",\n  Network: Network.ETH_MAINNET\n};\nconst provider = new Alchemy(setting);\nconst accountDetails = async () => {\n  const getCurrentBlock = await provider.core.getBlockNumber();\n  const previousBlock = getCurrentBlock - 10;\n  for (let i = getCurrentBlock; i > previousBlock; i--) {\n    tenBlock.push(i);\n  }\n  console.log(tenBlock);\n};\naccountDetails();\nexport default tenBlock;\n\n//await provider.core.getBlock(i)","map":{"version":3,"names":["Alchemy","Network","require","setting","apiKey","ETH_MAINNET","provider","accountDetails","getCurrentBlock","core","getBlockNumber","previousBlock","i","tenBlock","push","console","log"],"sources":["D:/Blockchain_Prac/block/client/myapp/src/Etherscan.js"],"sourcesContent":["const { Alchemy, Network } = require(\"alchemy-sdk\");\r\n\r\nconst setting = {\r\n  apiKey: \"1dFCMwz6qW-UR-dDdjd5km0vL3aKzjUN\",\r\n  Network: Network.ETH_MAINNET,\r\n};\r\n\r\nconst provider = new Alchemy(setting);\r\n\r\nconst accountDetails = async () => {\r\n      const getCurrentBlock = await provider.core.getBlockNumber();\r\n      const previousBlock = getCurrentBlock - 10;\r\n      \r\n\r\n      for (let i = getCurrentBlock; i > previousBlock; i--) {\r\n        tenBlock.push(i);\r\n      }\r\n      console.log(tenBlock);\r\n  }\r\n\r\naccountDetails();\r\nexport default tenBlock;\r\n\r\n//await provider.core.getBlock(i)"],"mappings":"AAAA,MAAM;EAAEA,OAAO;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEnD,MAAMC,OAAO,GAAG;EACdC,MAAM,EAAE,kCAAkC;EAC1CH,OAAO,EAAEA,OAAO,CAACI;AACnB,CAAC;AAED,MAAMC,QAAQ,GAAG,IAAIN,OAAO,CAACG,OAAO,CAAC;AAErC,MAAMI,cAAc,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,eAAe,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAACC,cAAc,CAAC,CAAC;EAC5D,MAAMC,aAAa,GAAGH,eAAe,GAAG,EAAE;EAG1C,KAAK,IAAII,CAAC,GAAGJ,eAAe,EAAEI,CAAC,GAAGD,aAAa,EAAEC,CAAC,EAAE,EAAE;IACpDC,QAAQ,CAACC,IAAI,CAACF,CAAC,CAAC;EAClB;EACAG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;AACzB,CAAC;AAEHN,cAAc,CAAC,CAAC;AAChB,eAAeM,QAAQ;;AAEvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}